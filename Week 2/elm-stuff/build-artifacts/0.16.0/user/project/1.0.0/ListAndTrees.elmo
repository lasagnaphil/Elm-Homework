Elm.ListAndTrees = Elm.ListAndTrees || {};
Elm.ListAndTrees.make = function (_elm) {
   "use strict";
   _elm.ListAndTrees = _elm.ListAndTrees || {};
   if (_elm.ListAndTrees.values) return _elm.ListAndTrees.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var subsequences = function (lst) {
      var _p0 = lst;
      if (_p0.ctor === "[]") {
            return _U.list([_U.list([])]);
         } else {
            var st = subsequences(_p0._1);
            return A2($Basics._op["++"],st,A2($List.map,function (x) {    return A2($List._op["::"],_p0._0,x);},st));
         }
   };
   var mem = F2(function (x,t) {
      mem: while (true) {
         var _p1 = t;
         if (_p1.ctor === "Empty") {
               return false;
            } else {
               var _p2 = _p1._0;
               if (_U.eq(x,_p2)) return true; else if (_U.cmp(x,_p2) < 0) {
                        var _v2 = x,_v3 = _p1._1;
                        x = _v2;
                        t = _v3;
                        continue mem;
                     } else {
                        var _v4 = x,_v5 = _p1._2;
                        x = _v4;
                        t = _v5;
                        continue mem;
                     }
            }
      }
   });
   var Node = F3(function (a,b,c) {    return {ctor: "Node",_0: a,_1: b,_2: c};});
   var cartesian = F3(function (l1,l2,x) {    return A2($List.concatMap,function (a) {    return A2($List.map,A2(Node,x,a),l1);},l2);});
   var Empty = {ctor: "Empty"};
   var fullTree = F2(function (x,h) {
      return _U.cmp(h,1) < 0 ? Empty : _U.eq(h,1) ? A3(Node,x,Empty,Empty) : A3(Node,x,A2(fullTree,x,h - 1),A2(fullTree,x,h - 1));
   });
   var balancedTree = F2(function (x,n) {
      if (_U.eq(n,1)) return A3(Node,x,Empty,Empty); else if (_U.eq(A2($Basics._op["%"],n,2),0)) return A3(Node,
            x,
            A2(balancedTree,x,n / 2 | 0),
            A2(balancedTree,x,n / 2 | 0)); else {
               var _p3 = A2(create2,x,(n - 1) / 2 | 0);
               return A3(Node,x,_p3._0,_p3._1);
            }
   });
   var create2 = F2(function (x,m) {    return {ctor: "_Tuple2",_0: A2(balancedTree,x,m),_1: A2(balancedTree,x,m + 1)};});
   var balancedTrees = F2(function (x,n) {
      return _U.eq(n,0) ? _U.list([A3(Node,x,Empty,Empty)]) : _U.eq(A2($Basics._op["%"],n,2),1) ? A3(cartesian,
      A2(balancedTrees,x,(n - 1) / 2 | 0),
      A2(balancedTrees,x,(n - 1) / 2 | 0),
      x) : A2($Basics._op["++"],
      A3(cartesian,A2(balancedTrees,x,(n - 1) / 2 | 0),A2(balancedTrees,x,n / 2 | 0),x),
      A3(cartesian,A2(balancedTrees,x,n / 2 | 0),A2(balancedTrees,x,(n - 1) / 2 | 0),x));
   });
   var completeTrees = F2(function (x,n) {
      var addRows = F3(function (tree,j,k) {
         var _p4 = tree;
         if (_p4.ctor === "Empty") {
               return _U.cmp(j,k) < 0 ? A3(Node,x,Empty,Empty) : Empty;
            } else {
               return A3(Node,_p4._0,A3(addRows,_p4._1,2 * j,k),A3(addRows,_p4._2,2 * j + 1,k));
            }
      });
      return A2($List.map,A2(addRows,A2(fullTree,x,n - 1),0),_U.range(0,Math.pow(2,n - 1) - 1));
   });
   var almostCompleteTrees = F2(function (x,n) {
      var addRows = F3(function (tree,j,indexList) {
         var _p5 = tree;
         if (_p5.ctor === "Empty") {
               return _U.eq(A2($List.member,j,indexList),true) ? A3(Node,x,Empty,Empty) : Empty;
            } else {
               return A3(Node,_p5._0,A3(addRows,_p5._1,2 * j,indexList),A3(addRows,_p5._2,2 * j + 1,indexList));
            }
      });
      var subseq = function (n) {    return A2($List.drop,1,$List.reverse(subsequences(_U.range(0,n - 1))));};
      return A2($List.map,A2(addRows,A2(fullTree,x,n - 1),0),subseq(Math.pow(2,n - 1)));
   });
   var main = $Graphics$Element.show(A2($List.map,function (_p6) {    return $List.length(A2(almostCompleteTrees,0,_p6));},_U.range(1,5)));
   var suffixes_2 = function (xs) {
      var _p7 = xs;
      if (_p7.ctor === "[]") {
            return _U.list([_U.list([])]);
         } else {
            return A2($List._op["::"],xs,suffixes_2(_p7._1));
         }
   };
   var suffixes = function (list) {
      var suffixes$ = F2(function (curList,lst) {
         suffixes$: while (true) {
            var _p8 = curList;
            if (_p8.ctor === "[]") {
                  return lst;
               } else {
                  var _v11 = _p8._1,_v12 = A2($List._op["::"],curList,lst);
                  curList = _v11;
                  lst = _v12;
                  continue suffixes$;
               }
         }
      });
      return $List.reverse(A2(suffixes$,list,_U.list([])));
   };
   return _elm.ListAndTrees.values = {_op: _op
                                     ,suffixes: suffixes
                                     ,suffixes_2: suffixes_2
                                     ,Empty: Empty
                                     ,Node: Node
                                     ,mem: mem
                                     ,fullTree: fullTree
                                     ,balancedTree: balancedTree
                                     ,create2: create2
                                     ,cartesian: cartesian
                                     ,balancedTrees: balancedTrees
                                     ,completeTrees: completeTrees
                                     ,subsequences: subsequences
                                     ,almostCompleteTrees: almostCompleteTrees
                                     ,main: main};
};