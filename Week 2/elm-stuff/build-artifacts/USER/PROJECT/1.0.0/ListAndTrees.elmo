Elm.ListAndTrees = Elm.ListAndTrees || {};
Elm.ListAndTrees.make = function (_elm) {
   "use strict";
   _elm.ListAndTrees = _elm.ListAndTrees || {};
   if (_elm.ListAndTrees.values)
   return _elm.ListAndTrees.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "ListAndTrees",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var mem = F2(function (x,t) {
      return function () {
         switch (t.ctor)
         {case "Empty": return false;
            case "Node": return _U.eq(x,
              t._0) ? true : _U.cmp(x,
              t._0) < 0 ? A2(mem,
              x,
              t._1) : _U.cmp(x,
              t._0) > 0 ? A2(mem,
              x,
              t._2) : _U.badIf($moduleName,
              "between lines 24 and 26");}
         _U.badCase($moduleName,
         "between lines 21 and 26");
      }();
   });
   var Node = F3(function (a,b,c) {
      return {ctor: "Node"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var Empty = {ctor: "Empty"};
   var fullTree = F2(function (x,
   h) {
      return _U.eq(h,1) ? A3(Node,
      x,
      Empty,
      Empty) : A3(Node,
      x,
      A2(fullTree,x,h - 1),
      A2(fullTree,x,h - 1));
   });
   var main = $Graphics$Element.show(A2(fullTree,
   0,
   2));
   var balancedTree = F2(function (x,
   n) {
      return _U.eq(n,1) ? A3(Node,
      x,
      Empty,
      Empty) : _U.eq(A2($Basics._op["%"],
      n,
      2),
      0) ? A3(Node,
      x,
      A2(balancedTree,x,n / 2 | 0),
      A2(balancedTree,
      x,
      n / 2 | 0)) : A3(Node,
      x,
      A2(balancedTree,
      x,
      (n + 1) / 2 | 0),
      A2(balancedTree,
      x,
      (n - 1) / 2 | 0));
   });
   _elm.ListAndTrees.values = {_op: _op
                              ,Empty: Empty
                              ,Node: Node
                              ,mem: mem
                              ,fullTree: fullTree
                              ,balancedTree: balancedTree
                              ,main: main};
   return _elm.ListAndTrees.values;
};